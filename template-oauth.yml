AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: PoC Oauth Service

##########################################################################
#  Parameters                                                            #
##########################################################################
Parameters:
  StageName:
    Type: String
    Default: test

##########################################################################
#  Global values that are applied to all resources                       #
##########################################################################
Globals:
  Function:
    MemorySize: 256
    Architectures: ["arm64"]
    Handler: bootstrap
    Runtime: provided.al2
    Timeout: 29
    Environment:
      Variables:
        RUST_BACKTRACE: 1
        RUST_LOG: info

Resources:
##########################################################################
#  S3 bucket where config page are stored                                #
##########################################################################
  SourceBucket:
    Type: AWS::S3::Bucket

##########################################################################
#  DynamoDB table for login                                              #
##########################################################################
  OAuthServiceTable:
    Type: AWS::DynamoDB::Table
    Properties:
      KeySchema:
        - AttributeName: client_id
          KeyType: HASH
        - AttributeName: user
          KeyType: RANGE
      AttributeDefinitions:
        - AttributeName: client_id
          AttributeType: S
        - AttributeName: user
          AttributeType: S
      BillingMode: PAY_PER_REQUEST

##########################################################################
# Lambda                                                                 #
##########################################################################
  OauthAuthorizeFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: build/oauth-authorize
      Policies:
        - AWSLambdaBasicExecutionRole
      Environment:
        Variables:
          OAUTH_AUTHORIZE_LOGIN_PATH: "/v2/login"
          OAUTH_CUSTOM_OPTIN_PATH: "/custom/optin"
          OAUTH_CUSTOM_CONSENT_PATH: "/custom/consent"
      Events:
        Api:
          Type: HttpApi
          Properties:
            Path: /authorize
            Method: GET
      Tags:
        Name: authorize
        env: !Ref StageName
        service: oauth

  OauthAuthorizeFunctionLogs:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: 1
      LogGroupName: !Sub "/aws/lambda/${OauthAuthorizeFunction}"
  
  OauthTokenFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: build/oauth-token
      Policies:
        - AWSLambdaBasicExecutionRole
      Events:
        Api:
          Type: HttpApi
          Properties:
            Path: /token
            Method: ANY #IT SHOULD BE A POST BUT FOR THE PoC is fine
      Tags:
        Name: token
        env: !Ref StageName
        service: oauth

  OauthTokenFunctionLogs:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: 1
      LogGroupName: !Sub "/aws/lambda/${OauthTokenFunction}"
  
##########################################################################
# Lambda -  load UI                                                      #
##########################################################################
  OauthOptinGETFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: build/oauth-get-page
      Policies:
        - AWSLambdaBasicExecutionRole
        - S3ReadPolicy:
            BucketName: !Ref SourceBucket
      Environment:
        Variables:
          CONFIG_BUCKETNAME: !Ref SourceBucket
          PAGE_NAME: optin
      Events:
        Api:
          Type: HttpApi
          Properties:
            Path: /custom/optin
            Method: GET
      Tags:
        Name: optin-load-page
        env: !Ref StageName
        service: oauth

  OauthOptinGETFunctionLogs:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: 1
      LogGroupName: !Sub "/aws/lambda/${OauthOptinGETFunction}"
  
  OauthConsentGETFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: build/oauth-get-page
      Policies:
        - AWSLambdaBasicExecutionRole
        - S3ReadPolicy:
            BucketName: !Ref SourceBucket
      Environment:
        Variables:
          CONFIG_BUCKETNAME: !Ref SourceBucket
          PAGE_NAME: consent
      Events:
        Api:
          Type: HttpApi
          Properties:
            Path: /custom/consent
            Method: GET
      Tags:
        Name: consent-load-page
        env: !Ref StageName
        service: oauth

  OauthConsentGETFunctionLogs:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: 1
      LogGroupName: !Sub "/aws/lambda/${OauthConsentGETFunction}"

  OauthLoginGETFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: build/oauth-get-page
      Policies:
        - AWSLambdaBasicExecutionRole
        - S3ReadPolicy:
            BucketName: !Ref SourceBucket
      Environment:
        Variables:
          CONFIG_BUCKETNAME: !Ref SourceBucket
          PAGE_NAME: login
      Events:
        Api:
          Type: HttpApi
          Properties:
            Path: /v2/login
            Method: GET
      Tags:
        Name: login-load-page
        env: !Ref StageName
        service: oauth
  
  OauthLoginGETFunctionLogs:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: 1
      LogGroupName: !Sub "/aws/lambda/${OauthLoginGETFunction}"

  OauthSignupGETFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: build/oauth-get-page
      Policies:
        - AWSLambdaBasicExecutionRole
        - S3ReadPolicy:
            BucketName: !Ref SourceBucket
      Environment:
        Variables:
          CONFIG_BUCKETNAME: !Ref SourceBucket
          PAGE_NAME: signup
      Events:
        Api:
          Type: HttpApi
          Properties:
            Path: /v2/signup
            Method: GET
      Tags:
        Name: signup-load-page
        env: !Ref StageName
        service: oauth
  
  OauthSignupGETFunctionLogs:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: 1
      LogGroupName: !Sub "/aws/lambda/${OauthSignupGETFunction}"

##########################################################################
# Lambda - Process from load UI                                          #
##########################################################################
  OauthOptinPOSTFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: build/oauth-optin-post
      Policies:
        - AWSLambdaBasicExecutionRole
        - Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action: 
                - dynamodb:UpdateItem
              Resource: !GetAtt OAuthServiceTable.Arn
      Environment:
        Variables:
          TABLE_NAME: !Ref OAuthServiceTable
          OAUTH_AUTHORIZE_PATH: "/authorize"
      Events:
        Api:
          Type: HttpApi
          Properties:
            Path: /custom/optin
            Method: POST
      Tags:
        Name: optin-process-page
        env: !Ref StageName
        service: oauth
  
  OauthOptinPOSTFunctionLogs:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: 1
      LogGroupName: !Sub "/aws/lambda/${OauthOptinPOSTFunction}"
  
  OauthConsentPOSTFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: build/oauth-consent-post
      Policies:
        - AWSLambdaBasicExecutionRole
        - Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action: 
                - dynamodb:UpdateItem
              Resource: !GetAtt OAuthServiceTable.Arn
      Environment:
        Variables:
          TABLE_NAME: !Ref OAuthServiceTable
          OAUTH_AUTHORIZE_PATH: "/authorize"
      Events:
        Api:
          Type: HttpApi
          Properties:
            Path: /custom/consent
            Method: POST
      Tags:
        Name: consent-process-page
        env: !Ref StageName
        service: oauth
  
  OauthConsentPOSTFunctionLogs:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: 1
      LogGroupName: !Sub "/aws/lambda/${OauthConsentPOSTFunction}"

  OauthLoginPOSTFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: build/oauth-login-post
      Policies:
        - AWSLambdaBasicExecutionRole
        - Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action: 
                - dynamodb:GetItem
              Resource: !GetAtt OAuthServiceTable.Arn
      Environment:
        Variables:
          TABLE_NAME: !Ref OAuthServiceTable
          OAUTH_AUTHORIZE_PATH: "/authorize"
      Events:
        Api:
          Type: HttpApi
          Properties:
            Path: /v2/login
            Method: POST
      Tags:
        Name: consent-process-page
        env: !Ref StageName
        service: oauth
  
  OauthLoginPOSTFunctionLogs:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: 1
      LogGroupName: !Sub "/aws/lambda/${OauthLoginPOSTFunction}"
  
  OauthSignupPOSTFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: build/oauth-signup-post
      Policies:
        - AWSLambdaBasicExecutionRole
        - Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action: 
                - dynamodb:PutItem
              Resource: !GetAtt OAuthServiceTable.Arn
      Environment:
        Variables:
          TABLE_NAME: !Ref OAuthServiceTable
      Events:
        Api:
          Type: HttpApi
          Properties:
            Path: /v2/signup
            Method: POST
      Tags:
        Name: signup-process-page
        env: !Ref StageName
        service: oauth
  
  OauthSignupPOSTFunctionLogs:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: 1
      LogGroupName: !Sub "/aws/lambda/${OauthSignupPOSTFunction}"

Outputs:
  OAuthUrl:
    Description: "API Gateway endpoint URL"
    Value: !Sub "https://${ServerlessHttpApi}.execute-api.${AWS::Region}.amazonaws.com/"
    Export:
      Name: 
        Fn::Sub: oauth-AuthUrl
